The instruction defines steps to install all required components of memfis on a dev box (single machine, ubuntu)

=== Initial steps ===
1. login on the box using root account

2. execute the following command to create service user:
# adduser memfis

2.1. set password for the user using the following command:
# passwd memfis	

3. change directory to root (/) using the following command:
# cd /

4. create directory /app using the following command:
# mkdir /app

5. change owner of the /app directory to memfis using the following command:
# chown memfis:memfis /app

3. install nmap using following command
# yum install nmap

=== Java 8 installation ===
1. download oracle jdk 1.8 from oficial oracle website (tar.gz)

2. download openjdk 11 from official openjdk website (tar.gz)

3. login on the box using memfis account via ssh

4. change directory to /app, using the following command:
$ cd /app

5. create directory for java installations using the following command:
$ mkdir java

6. change directory to /app/java using the following command:
$ cd java

7. using any sftp client upload jdk's (from steps #1 and #2) to /app/java directory

8. unpack jdk 1.8 using the following command:
$ tar -zxf <JDK1.8>.tar.gz

9. unpack jdk 11 using the following command:
$ tar -zxf <JDK11>.tar.gz

10. delete both jdk distrs:
$ rm <JDK1.8>.tar.gz
$ rm <JDK11>.tar.gz

11. change directory to home using the following command:
$ cd ~

12. modify .bash_profile file to add the following lines BEFORE "export PATH" of the file (modify paths according to your dir names!!!):
>>> START /home/memfis/.bash_profile

export JAVA_HOME=/app/java/<jdk_11_home>
PATH="$JAVA_HOME/bin:$PATH"

# don't add this to $PATH
export JAVA8_HOME=/app/java/jdk1.8.0_201
>>> FINISH

13. logout from SSH to have system vars on next SSH session using the following command:
exit

=== Install PostgreSQL & Configure ===

1. login dev box using root account

1.1. update yum using the following command:
# yum update

2. install postgresql using the following command:
# yum install postgresql-server postgresql-contrib

2.1 install net-tools (for ifconfig etc.) using the following command:
# yum install net-tools

3. check all available interfaces using the following command:
# ifconfig -a

4. check whether postgresql is listening on external interface (it MUST NOT) on port 5432:
# nmap <external_ip> -p1-65535

5. check whether postgresql is listening on loopback interface on port 5432:
# nmap 127.0.0.1 -p1-65535

5.0 if not started do the following steps (5.x)

5.1. initialize postgresql database using the following command:
# postgresql-setup initdb

5.2 allow to run postgresql service using the following command:
# systemctl enable postgresql

5.3 run postgresql service using the following command:
# systemctl start postgresql

5.4. check whether postgresql is listening on external interface (it MUST NOT) on port 5432:
# nmap <external_ip> -p1-65535

5.5. check whether postgresql is listening on loopback interface on port 5432 (it must):
# nmap 127.0.0.1 -p1-65535

6. modify /var/lib/pgsql/data/pg_hba.conf
>>> START the following line
local   all             all                                peer
>>> FINISH
to
>>> START /etc/postgresql/<version>/main/pg_hba.conf
local   all             all                                trust
>>> FINISH

7. restart postgresql using the following command (on custom version of progres the service name will be different, suse "systemctl list-units | grep post" to get actual name):
# service postgresql.service restart

8. login into postgresql shell using the following command:
# psql -U postgres

9. reset password for postgres user using the following SQL command:
postgres=# ALTER USER postgres WITH PASSWORD '<password>';

10. exit from postgresql using the following command:
postgres=# \q

11. modify /etc/postgresql/<version>/main/pg_hba.conf
>>> START the following lines
local   all             all                                     trust
host    all             all             127.0.0.1/32            ident
host    all             all             ::1/128                 ident
>>> FINISH
to
>>> START /etc/postgresql/<version>/main/pg_hba.conf
local   all             all                                     md5
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
>>> FINISH

12. restart postgresql using the following command:
# service postgresql.service restart

13. try to login to postgresql shell using the following command (requires password from step #9):
# psql -U postgres -W

14. login on the box via ssh as the memfis user

15. create directory for postgresql scripts, using the following command:
$ mkdir ~/psql/ 

15. from bitbucket repo upload the following files to /home/memfis/psql/ directory using any sftp client:
/colaba_back/clb-parent/clb-model/psql/_initial-1.sql
/colaba_back/clb-parent/clb-model/psql/_initial-2.sql
/colaba_back/clb-parent/clb-model/psql/alter-0.0.1-1.sql
/colaba_back/clb-parent/clb-model/psql/alter-0.0.1-2.sql
/colaba_back/clb-parent/clb-model/psql/alter-0.0.1-3.sql
/colaba_back/clb-parent/clb-model/psql/alter-0.0.1-4.sql


16. modify /home/memfis/psql/_initial-1.sql:
>>> START the following line:
CREATE USER hibernate WITH ENCRYPTED PASSWORD '121212';
>>> FINISH
to
>>> START /home/memfis/psql/_initial-1.sql:
CREATE USER hibernate WITH ENCRYPTED PASSWORD '<actual_password>';
>>> FINISH

17. change directory to /home/memfis/psql/ using the following command:
$ cd ~/psql/

18. execute the following commands to setup postgresql database 
(require password of postgres user on first step and password for hibernate user the next commands [from #16]):
$ psql -U postgres -d postgres -a -f _initial-1.sql
$ psql -U hibernate -d clb -a -f _initial-2.sql
$ psql -U hibernate -d clb -a -f alter-0.0.1-1.sql
$ psql -U hibernate -d clb -a -f alter-0.0.1-2.sql
$ psql -U hibernate -d clb -a -f alter-0.0.1-3.sql
$ psql -U hibernate -d clb -a -f alter-0.0.1-4.sql


=== Install Apache Cassandra & Configure ===

1. login on the box via ssh using memfis account.

2. change directory to /app/ using the following command:
$ cd /app/

3. create directory for apache cassandra using the following command:
$ mkdir cassandra/

4. download apache cassandra from offical website: http://www.apache.org/dyn/closer.lua/cassandra/3.11.4/apache-cassandra-3.11.4-bin.tar.gz

5. upload tar.gz distr of cassandra to the box into /app/cassandra/ via sftp using memfis account.

6. change directory to /app/cassandra/ using the following command:
$ cd /app/cassandra/

7. unpack tar.gz distr of apache cassandra using the following command:
$ tar -xzf <filename>.tar.gz

8. change directory to bin directory of cassandra using the following command:
$ cd /app/cassandra/<home_folder>/bin/

9. modify "cassandra" file: replace any occurrence of JAVA_HOME by JAVA8_HOME;

10. modify "nodetool" file: replace any occurrence of JAVA_HOME by JAVA8_HOME;

11. change directory to conf using the following command:
$ cd ../conf/

12. modify the following keys of cassandra.yaml:
>>> START /app/cassandra/<home_folder>/conf/cassandra.yaml:
cluster_name: 'MemfisDevCluster'
>>> FINISH

13. change directory back to bin
$ cd ../bin/

14. run cassandra using the following command:
$ ./cassandra

15. wait until you see something like the following:
INFO  [MigrationStage:1] 2019-05-11 23:38:06,298 ColumnFamilyStore.java:430 - Initializing system_auth.resource_role_permissons_index
INFO  [MigrationStage:1] 2019-05-11 23:38:06,316 ColumnFamilyStore.java:430 - Initializing system_auth.role_members
INFO  [MigrationStage:1] 2019-05-11 23:38:06,334 ColumnFamilyStore.java:430 - Initializing system_auth.role_permissions
INFO  [MigrationStage:1] 2019-05-11 23:38:06,351 ColumnFamilyStore.java:430 - Initializing system_auth.roles

16. press enter and check cassandra cluster status using the following command:
$ ./nodetool status

17. check output of the command above, it must be like the following (UN is Up/Normal):
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens       Owns (effective)  Host ID                               Rack
UN  127.0.0.1  103.69 KiB  256          100.0%            dc8f9e38-83ba-4ff9-9d1f-eb4e9bec14bd  rack1

18. check whether cassandra listens only loopback interface by the following command:
$ nmap <external_IP> -p1-65535

19. output of the command above must have only one open port (22) and should be like the following
Starting Nmap 7.60 ( https://nmap.org ) at 2019-05-11 23:43 MSK
Nmap scan report for dev.memfis.org (91.201.42.148)
Host is up (0.00027s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
22/tcp open  ssh

Nmap done: 1 IP address (1 host up) scanned in 5.17 seconds

20. type pwd command:
$ pwd

21. copy output (it must be path to bin folder of cassandra)

22. change directory to home using the following command:
$ cd ~

22. modify ".bash_profile" file, add the following lines BEFORE "export PATH":
>>> START .bash_profile

PATH="<copied_path_from_step_#21>:$PATH"

>>> FINISH

23. logout from ssh session using the following command:
$ exit

24. login on the box via ssh using root account

25. (check before using the following command: "python -V") install python 2.7 using the following command:
# apt install python2.7

26. login back to the box via ssh using memfis account

27. cd directory to home using the following command:
$ cd ~

28. create directory for cql scripts:
$ mkdir cql

28.from bitbucket repo upload the following files to /home/memfis/cql/ directory using any sftp client:
/colaba_back/clb-parent/clb-chat-parent/clb-chat-model/cassandra/initial.cql

29. change directory to cql using the following command:
$ cd ~/cql/ 

30. execute cassandra shell script using the following command:
$ cqlsh -f initial.cql

31. login to cassandta shell using the following command:
$ cqlsh

32. to see all existed keyspaces execute the following command:
cqlsh> describe keyspaces;

33. output of the command above must contain "clb_chat";

34. set clb_chat as an active keyspace using the following command:
cqlsh> use clb_chat;

35. check whether all tables are present in the keyspace using the following command:
cqlsh:clb_chat> describe tables;

36. exit from cassandra shell console using the following command:
cqlsh:clb_chat> exit;

37. change directory to /app/cassandra/ using the following command:
$ cd /app/cassandra/

38. delete distrbutive of cassandra using the following command:
$ rm <dist_name>.tar.gz




=== Install Apache ActiveMQ & Configure ===
1. login on the box via ssh using memfis account.

2. change directory to /app/ using the following command:
$ cd /app/

3. create directory for apache active mq using the following command:
$ mkdir activemq/

4. download apache active mq for linux from offical website: https://activemq.apache.org/components/classic/download/

5. upload tar.gz distr of activemq to the box into /app/activemq/ via sftp using memfis account.

6. change directory to /app/cassandra/ using the following command:
$ cd /app/activemq/

7. unpack tar.gz distr of apache cassandra using the following command:
$ tar -xzf <filename>.tar.gz

8. delete tar.gz distr of apache cassandra using the following command:
$ rm <filename>.tar.gz

9. change directory to conf directory of apache activemq
$ cd <activemq_home>/conf/

10. modify activemq.xml
>>> START the following lines:
<transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
>>> FINISH
to (change network interface only)
>>> START /app/activemq/<activemq_home>/conf/activemq.xml
<transportConnector name="openwire" uri="tcp://127.0.0.1:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="amqp" uri="amqp://127.0.0.1:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="stomp" uri="stomp://127.0.0.1:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="mqtt" uri="mqtt://127.0.0.1:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="ws" uri="ws://127.0.0.1:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
>>> FINISH

11. modify jetty-realm.properties
>>> START the following lines:
admin: admin, admin
user: user, user
>>> FINISH
to
>>> START /app/activemq/<activemq_home>/conf/jetty-realm.properties
mqsupadmin: <password>, admin
>>> FINISH

12. change directory to bin directory of apache activemq
$ cd ../bin/

13. run activemq using the following command
$ ./activemq start

13.1. login on the box using root account via ssh

13.2. add firewall rule for active mq web-admin console port for our office IP using the following command:
# firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="79.172.8.74/32" port protocol="tcp" port="8161" accept'

13.3. reload firewall using the following command:
# firewall-cmd --reload

14. open activemq web console: http://<hostname>:8161/admin/index.jsp

15. login there using credentials from step #11

16. go to http://<hostname>:8161/admin/topics.jsp

17. create topic "task_chat" (without quotes)



=== Install MariaDB & Configure ===
1. login on the box via ssh using root account.

2. install MariaDB using the following command:
# yum install mariadb-server

2.1 modify /etc/my.cnf file, after "socket" key insert the following line:
>>> START /etc/my.cnf
bind=127.0.0.1
>>> FINISH

2.1 allow to run mariadb service using the following command:
# systemctl enable mariadb

2.2 run mariadb service using the following command:
# systemctl start mariadb

3. login to mariadb shell using the following command:
# mysql

4. add memfis user in mariadb using the following command:
MariaDB [(none)]> CREATE USER 'memfis'@'localhost' IDENTIFIED BY '<password>';

5. grant all priveleges to memfis user in mariadb using the following command:
MariaDB [(none)]> GRANT ALL PRIVILEGES ON *.* TO 'memfis'@'localhost' WITH GRANT OPTION;

6. login on the box via ssh using memfis account

7. cd directory to home using the following command:
$ cd ~

8. create directory for cql scripts:
$ mkdir mysql

9. from bitbucket repo upload the following files to /home/memfis/mysql/ directory using any sftp client:
/colaba_back/clb-parent/clb-chat-parent/clb-chat-model/mysql/initial.sql

10. inside initial.sql change password of hibernate user:
>>> START /home/memfis/mysql/initial.sql
CREATE USER hibernate IDENTIFIED BY '<password>';
GRANT ALL PRIVILEGES ON clb_chat.* to hibernate@'%' IDENTIFIED BY '<password>';
GRANT ALL PRIVILEGES ON clb_chat.* to hibernate@'localhost' IDENTIFIED BY '<password>';
>>> FINISH

11. change directory to ~/mysql/ using the following command
$ cd mysql/

12. login to mariadb shell using the following command (requires password from step #4):
$ mysql -u memfis -p

13. execute initial.sql using the following command:
MariaDB [(none)]> source /home/memfis/mysql/initial.sql

14. exit from mariadb shell using the following command:
MariaDB [(none)]> exit;


=== Install Elastic Search & Configure ===

1. login on the box via ssh using memfis account;

2. change directory to /app using the following command:
$ cd /app/

3. create directory for elastic search using the following command:
$ mkdir elastic-search/

4. download elastic search distributive for linux (*.tar.gz) from official website (7.x version): https://www.elastic.co/downloads/elasticsearch

5. upload elastic search distributive on the box to the /app/elastic-search/ directory using any sftp client

5.1 change directory to /app/elastic-search/ using the following command:
$ cd /app/elastic-search/

6. unpack elastic search distributive using the following command:
$ tar -xzf <filename>.tar.gz

7. delete elastic search distributive using the following command:
$ rm <filename>.tar.gz

8. change directory to bin folder of elastic search using the following command:
$ cd <elastic_home>/bin/

9. run elastic search using the following command:
$ ./elasticsearch -d


=== Install Apache Tomcat, Configure & Deploy Memfis apps ===

1. fetch collaba_back repo

2. build clb-parent using the following command inside the directory:
mvn clean install

3. login on the box via ssh using memfis account;

4. change directory to /app using the following command:
$ cd /app/

5. create directory for apache tomcat using the following command:
$ mkdir tomcat/

6. download tomcat 9.x (download type: core; distr format: tar.gz) from oficial website: https://tomcat.apache.org/download-90.cgi

7. upload tomcat distributive to /app/tomcat/ directory of the box using any sftp client

8. change directory to /app/tomcat/ using the following command:
$ cd /app/tomcat/

9. unpack tomcat distr using the following command:
$ tar -xzf <filename>.tar.gz

10. delete tomcat distr using the following command:
$ rm <filename>.tar.gz

11. change directory to /app/tomcat/<tomcat_home>/webapps/ using the following command:
$ cd /app/tomcat/<tomcat_home>/webapps/

12. delete all files/directories in the directory using the following commands:
$ rm -rf docs/
$ rm -rf examples/
$ rm -rf host-manager/
$ rm -rf manager/
$ rm -rf ROOT/

13. upload the following files that appear after build of local copy of colaba_back to /app/tomcat/<tomcat_home>/lib/:
/colaba_back/clb-parent/clb-common/clb-common-deps-cassandra/target/clb-common-deps-cassandra-2.0.0-RELEASE-jar-with-dependencies.jar
/colaba_back/clb-parent/clb-common/clb-common-deps-elasticsearch/target/clb-common-deps-elasticsearch-2.0.0-RELEASE-jar-with-dependencies.jar
/colaba_back/clb-parent/clb-common/clb-common-deps-jms/target/clb-common-deps-jms-2.0.0-RELEASE-jar-with-dependencies.jar
/colaba_back/clb-parent/clb-common/clb-common-deps-logging/target/clb-common-deps-logging-2.0.0-RELEASE-jar-with-dependencies.jar
/colaba_back/clb-parent/clb-common/clb-common-deps-sql/target/clb-common-deps-sql-2.0.0-RELEASE-jar-with-dependencies.jar
/colaba_back/clb-parent/clb-common/clb-common-deps-jackson/target/clb-common-deps-jackson-2.0.0-RELEASE-jar-with-dependencies.jar

14. upload the following files that appear after build of local copy of colaba_back to /app/tomcat/<tomcat_home>/webapps/:
/colaba_back/clb-parent/clb-chat-parent/clb-chat-web/target/clb-chat-web.war
/colaba_back/clb-parent/clb-web/target/clb-web.war

15. change directory to conf directory of tomcat using the following command:
$ cd ../conf/ 

16. create file common.properties with the following content:
>>> START /app/tomcat/<tomcat_home>/conf/common.properties
email.host=smtp.yandex.ru
email.port=587
email.host.user=<email_account>
email.host.password=<email_password>
email.from=<email_from>

front.url=https://dev1.memfis.org
front.url.activate=/join/activate/
front.url.reset.password=/reset-password/

chat.token.notbefore.tolerance.seconds=1
chat.token.lifetime.seconds=5

crypto.secret.key=a1yhaa6akhacjaavajalaa

file.upload.max.size=10485760

dropbox.client.id=<dropbox_id>
dropbox.client.secret=<dropbox_secret>
dropbox.redirecturi.organization=https://dev1.memfis.org/organizations-services/dropbox/
dropbox.redirecturi.project=https://dev1.memfis.org/projects-services/dropbox/
>>> FINISH

17. create log4j2.xml with the following content:
>>> START /app/tomcat/<tomcat_home>/conf/log4j2.xml
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
  <Appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level [%t] %logger{36}:%L - %msg%n"/>
    </Console>
    <RollingFile name="File" append="true" fileName="${sys:catalina.home}/logs/memfis.log" filePattern="${sys:catalina.home}/logs/memfis.%d{yyyy-MM-dd_HH-mm-ss}.%i.log">
        <PatternLayout>
            <Pattern>%d{HH:mm:ss.SSS} %-5level [%t] %logger{36}:%L - %msg%n</Pattern>
        </PatternLayout>
        <Policies>
            <SizeBasedTriggeringPolicy size="50 MB" />
        </Policies>
    </RollingFile>
  </Appenders>
  <Loggers>
    <Root level="debug">
      <AppenderRef ref="File"/>
    </Root>
  </Loggers>
</Configuration>
>>> FINISH

18. modify server.xml: add the following text as LAST child elements of /Server/GlobalNamingResource element (CONTAINS PLACEHOLDERS)
>>> START /app/tomcat/<tomcat_home>/conf/server.xml
       <!-- PostgreSQL -->
       <Resource 
            auth="Container"
            closeMethod="close"
            defaultAutoCommit="true"
            defaultTransactionIsolation="REPEATABLE_READ"
            description="clb postgresql connection pool"
            driverClassName="org.postgresql.Driver"
            factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
            global="jdbc/postgresqldb"
            maxIdle="10"
            maxTotal="50"
            maxWaitMillis="10000"
            name="jdbc/postgresqldb"
            removeAbandonedTimeout="300"
            singleton="true"
            type="javax.sql.DataSource" 
            url="jdbc:postgresql://localhost:5432/clb"
            username="hibernate" 
            password="<postgresql:hibernate_password>" />
            
       <!-- MariaDB -->
       <Resource 
            auth="Container"
            closeMethod="close"
            defaultAutoCommit="true"
            defaultTransactionIsolation="READ_COMMITTED"
            description="clb mariadb connection pool"
            driverClassName="org.mariadb.jdbc.Driver"
            factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
            global="jdbc/mariadb"
            maxIdle="10"
            maxTotal="50" 
            maxWaitMillis="10000"
            name="jdbc/mariadb"
            removeAbandonedTimeout="300"
            singleton="true"
            testOnBorrow="true"
            validationQuery="SELECT 1"
            type="javax.sql.DataSource"
            url="jdbc:mysql://localhost:3306/clb_chat"
            username="hibernate"
            password="<mariadb:hibernate_password>" />

       <!-- Cassandra -->
       <!-- examples: 
       applicationConfFile="${sys:catalina.home}/conf/application.conf" 
       localDataCenter="dc_ru1" 
       nodes="192.168.0.175:9042;192.168.0.176:9042"
       localDataCenter="datacenter1" 
       nodes="localhost:9042" 
       -->
       <Resource 
            auth="Container"
            closeMethod="close"
            factory="org.wrkr.clb.common.cassandra.CqlSessionFactory"
            keyspace="clb_chat"
            localDataCenter="datacenter1"
            name="nosql/cassandra/cqlsession"
            nodes="localhost:9042"
            singleton="true"
            type="com.datastax.oss.driver.api.core.CqlSession" />
       
       <!-- ActiveMQ Factory -->
       <Resource 
            auth="Container"
            brokerName="LocalActiveMQBroker"
            brokerURL="tcp://localhost:61616"
            description="JMS Connection Factory"
            factory="org.apache.activemq.jndi.JNDIReferenceFactory"
            name="jms/ConnectionFactory"
            type="org.apache.activemq.ActiveMQConnectionFactory"
            useEmbeddedBroker="false" />

       <!-- ActiveMQ Topic -->
       <Resource
            auth="Container"
            factory="org.apache.activemq.jndi.JNDIReferenceFactory"
            name="jms/topic/task.chat"
            physicalName="task.chat"
            type="org.apache.activemq.command.ActiveMQTopic" />

       <!-- Elastic Search -->
       <Resource 
            auth="Container"
            closeMethod="close"
            factory="org.wrkr.clb.common.elasticsearch.ElasticsearchClientFactory"
            name="elasticsearch/client"
            nodes="localhost:9200"
            scheme="http"
            singleton="true"
            type="org.elasticsearch.client.RestHighLevelClient" />
>>> FINISH

19. modify server.xml: change port http port to 8000 and bind address to 127.0.0.1
>>> START the following
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
>>> FINISH
to 
>>> START /app/tomcat/<tomcat_home>/conf/server.xml
    <Connector port="8000"
               address="127.0.0.1"
               protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
>>> FINISH

19. modify server.xml: change bind address to 127.0.0.1
>>> START the following
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443"/>
>>> FINISH
to 
>>> START /app/tomcat/<tomcat_home>/conf/server.xml
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" address="127.0.0.1"/>
>>> FINISH

20. modify context.xml: add the following text as LAST child elements of /Context element
>>> START /app/tomcat/<tomcat_home>/conf/context.xml
    <ResourceLink name="jdbc/postgresqldb" global="jdbc/postgresqldb" type="javax.sql.DataSource"/>
    <ResourceLink name="jdbc/mariadb" global="jdbc/mariadb" type="javax.sql.DataSource"/>
    <ResourceLink name="nosql/cassandra/cqlsession" global="nosql/cassandra/cqlsession" type="com.datastax.oss.driver.api.core.CqlSession"/>

    <ResourceLink name="jms/ConnectionFactory" global="jms/ConnectionFactory" type="org.apache.activemq.ActiveMQConnectionFactory"/>
    <ResourceLink name="jms/topic/task.chat" global="jms/topic/task.chat" type="org.apache.activemq.command.ActiveMQTopic"/>

    <ResourceLink name="elasticsearch/client" global="elasticsearch/client" type="org.elasticsearch.client.RestHighLevelClient"/>
>>> FINISH

21. change directory to bin dir of tomcat using the following command:
$ cd ../bin/

22. create file setenv.sh with the following content:
>>> START /app/tomcat/<tomcat_home>/bin/setenv.sh
JAVA_OPTS="$JAVA_OPTS -Dlog4j.configurationFile=$CATALINA_HOME/conf/log4j2.xml"

>>> FINISH

23. make setenv.sh executable using the following command:
$ chmod +x setenv.sh

24. run tomcat using the following command:
$ ./startup.sh






=== DONT DO NEXT STEPS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

=== Install Apache Httpd & Configure===

1. login on the box via ssh using memfis account;

2. change directory to /app using the following command:
$ cd /app/

3. create directory for static front files:
$ mkdir front-static/

4. upload front files to the directory using any sftp client (using memfis account)

5. login on the box via ssh using root account;

6. install apache httpd using the following command:
# yum install httpd

7. install mod_ssl using the following command:
# yum install mod_ssl

8. create file /etc/httpd/conf.d/default-site.conf with the following content:
>>> START /etc/httpd/conf.d/default-site.conf
<VirtualHost *:443>

#    ServerName dev0.memfis.org

    DocumentRoot /app/front-static/

    SSLEngine on
    SSLCertificateFile /etc/httpd/conf.d/ssl.d/dev1.memfis.org.crt
    SSLCertificateKeyFile /etc/httpd/conf.d/ssl.d/dev1.memfis.org.key
#    SSLCACertificateFile /etc/httpd/conf.d/ssl.d/intermediate-certificate.crt

    ProxyPreserveHost On
    ProxyPass "/clb-web" "http://localhost:8000/clb-web" retry=0
    ProxyPassReverse "/clb-web" "http://localhost:8000/clb-web"
    ProxyPass "/clb-chat-web" "http://localhost:8000/clb-chat-web" retry=0
    ProxyPassReverse "/clb-chat-web" "http://localhost:8000/clb-chat-web"

</VirtualHost>
>>> FINISH

9. change directory to /etc/httpd/conf.d/ using the following command:
# cd /etc/httpd/conf.d/

10. create directory for ssl certificates using the following command:
# mkdir ssl.d/

11. change directory to ssl.d using the following command:
# cd ssl.d/

12. generate self-signed cert using the following command:
# openssl req -x509 -nodes -days 1000 -newkey rsa:2048 -keyout dev1.memfis.org.key -out dev1.memfis.org.crt

13. add exceptions in firewall using the following commands:
# firewall-cmd --permanent --add-port=80/tcp
# firewall-cmd --permanent --add-port=443/tcp

14. restart firewall using the following command:
# firewall-cmd --reload

8. allow to run httpd service using the following command:
# systemctl enable httpd

9. run httpd service using the following command:
# systemctl start httpd


/usr/sbin/setsebool -P httpd_can_network_connect 1


=== NGINX SETUP ===

install epel-release repositories
# yum install epel-release
# yum update

install nginx
#  yum install nginx

add restriction for network connect nginx daemon
# /usr/sbin/setsebool -P httpd_can_network_connect 1

#get semanage command from utilities
# #yum install policycoreutils-python

#open http port
# # firewall-cmd --add-service=http

#open https port
# # firewall-cmd --add-service=https

#write this shit forever
# # firewall-cmd --runtime-to-permanent

make directory for certificates
# mkdir /etc/nginx/ssl
# chown nginx:nginx /etc/nginx/ssl/

make selfsigned certificate
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx-selfsigned.key -out /etc/nginx/ssl/nginx-selfsigned.crt

make dparam keys
#  openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

3. edit /etc/nginx/conf.d/memfis.conf

>>> START

upstream tomcat {
    ip_hash;
    server 159.89.234.224:8000;
    server 159.89.230.24:8000;
}

server {
    listen 80;
    server_name www.qirk.org qirk.org;
    return 301 https://qirk.org$request_uri;
}

server {
    listen 443;
    server_name www.qirk.org;
    return 301 https://qirk.org$request_uri;
}

server {
    listen 443 default_server http2 ssl;
    listen [::]:443 http2 ssl;
    server_name qirk.org;
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    client_max_body_size 1000m;
    error_log /var/log/nginx/error.log error;

    location / {
        root /var/www/git/build;
        try_files $uri $uri/ /index.html;
   }

    location /clb-web {
        proxy_pass http://tomcat/clb-web;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /clb-chat-web {
        proxy_pass http://tomcat/clb-chat-web;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 900;
    }


    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root /var/www/maintenance/pages;
    }
    error_page 404 /404.html;
    location = /40x.html {
    }
}

>>> FINISH

make dirs for project
# mkdir /var/www
# chown nginx:nginx /var/www/

restart nginx
# systemctl restart nginx


=== FRONTENT BUILD ===

install git on server
#  yum -y install git bc

clone front repository to /app/front
# git clone https://link_to_repo /var/www/git

install tools for nodejs and libraries installation
# yum install -y gcc-c++ make

put nodejs stable repositories in repo lists
#  curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -

6. install nodejs
#  yum install -y nodejs

go to front directory
# cd /var/www/git

install npm packages
# npm install

build frontend
#  npm run build

change files permissions
# chown -R nginx:nginx /var/www/git

change user permissions for directory iv files was moved
#  sudo restorecon -r -v /var/www

###Hacks
than give nginx access to files in directory
#  sudo semanage fcontext -a -t httpd_sys_content_t '/var/www(/.*)?'
